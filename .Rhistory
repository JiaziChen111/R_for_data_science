geom_text(aes(label=as.character(ID)),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("SSRTs During Scans, \nAll Participants")
SSRT_rawTrn <- ggplot(subset(SSRT.df.raw, time %in%  c("run3", "run4", "run5", "run6", "run7", "run8", "run9", "run10", "run11", "run12") & condition == "train")) +
aes(x= time, y= SSRT, label=ID)+
geom_point(na.rm=TRUE) +
geom_text(aes(label=as.character(ID)),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("SSRTs During Training Raw Data, \nTraining Group Only")
PctInhib_rawScan <- ggplot(subset(SSRT.df.raw,time %in% c("run1", "run2", "run13", "run14"))) +
aes(x= time, y= pctInhibition, label=ID)+
geom_point(na.rm=TRUE) +
geom_text(aes(label=as.character(ID)),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("Percent Inhibition During Scans, \nAll Participants")
pctInhib_rawTrn <- ggplot(subset(SSRT.df.raw, time %in% c("run3", "run4", "run5", "run6", "run7", "run8", "run9", "run10", "run11", "run12") & condition == "train")) +
aes(x= time, y= pctInhibition, label=ID)+
geom_point(na.rm=TRUE) +
geom_jitter(width = 0.25) +
geom_text(aes(label=as.character(ID)),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("Percent Inhibition Raw Data, \nTraining Group During Training")
noResp_clean <- ggplot(SSRT.df.clean, aes(x= time, y= numNoResponse, label=ID))+
geom_point(na.rm=TRUE) +
geom_text(aes(label=ifelse(numNoResponse>10,as.character(ID),'')),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("Non-Responses, All P's, All Times, \nUpper Limits: Training 25, Scans 50")
wrongGo_cleanAll <- ggplot(subset(SSRT.df.clean, time %in% c("run1", "run2", "run13", "run14"))) +
aes(x= time, y= numWrongGo, label=ID) +
geom_point(na.rm=TRUE) +
geom_text(aes(label=as.character(ID)),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("Wrong Gos During Scans, All P's, \nUpper Limit Cut-Off of 25")
wrongGo_cleanTrn <- ggplot(subset(SSRT.df.clean,time %in%  c("run3", "run4", "run5", "run6", "run7", "run8", "run9", "run10", "run11", "run12") & condition == "train")) +
aes(x= time, y= numWrongGo, label=ID) +
geom_point(na.rm=TRUE) +
geom_text(aes(label=ifelse(numWrongGo>25,as.character(ID),'')),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("Wrong Go's During Training, \nTraining Group Only, Upper Limit 25")
PctInhib_cleanTrn <- ggplot(subset(SSRT.df.clean, time %in%  c("run3", "run4", "run5", "run6", "run7", "run8", "run9", "run10", "run11", "run12") & condition == "train")) +
aes(x= time, y= pctInhibition, label=ID)+
geom_point(na.rm=TRUE) +
geom_text(aes(label=as.character(ID)),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("Percent Inhibition During Training, \nTraining Group Only, Lower Limit 15")
PctInhib_cleanScan <- ggplot(subset(SSRT.df.clean,time %in% c("run1", "run2", "run13", "run14"))) +
aes(x= time, y= pctInhibition, label=ID)+
geom_point(na.rm=TRUE) +
geom_text(aes(label=as.character(ID)),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("Pct Inhibition During Scans, All P's, \nUpper Limit 80, Lower Limit 20")
SSRT_cleanScan <- ggplot(subset(SSRT.df.clean,time %in% c("run1", "run2", "run13", "run14"))) +
aes(x= time, y= SSRT, label=ID)+
geom_point(na.rm=TRUE) +
geom_text(aes(label=as.character(ID)),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("SSRTs During Scans, All P's, \nUpper Limit 850 and Lower Limit 50")
SSRT_cleanTrn <- ggplot(subset(SSRT.df.clean, time %in%  c("run3", "run4", "run5", "run6", "run7", "run8", "run9", "run10", "run11", "run12") & condition == "train")) +
aes(x= time, y= SSRT, label=ID)+
geom_point(na.rm=TRUE) +
geom_text(aes(label=as.character(ID)),hjust=0, vjust=0, na.rm=TRUE) +
ggtitle("SSRTs During Training, \nTraining Group, Upper Limit 500")
grid.arrange(wrongGo_rawAll, wrongGo_cleanAll, ncol=2)
grid.arrange(wrongGo_rawTrn, wrongGo_cleanTrn, ncol=2)
grid.arrange(noResp_raw, noResp_clean, ncol=2)
grid.arrange(PctInhib_rawScan,PctInhib_cleanScan, ncol=2)
grid.arrange(pctInhib_rawTrn, PctInhib_cleanTrn, ncol=2)
grid.arrange(SSRT_rawScan, SSRT_cleanScan, ncol=2)
grid.arrange(SSRT_rawTrn, SSRT_cleanTrn, ncol=2)
SSRT.df.clean$prePost <- ifelse(SSRT.df.clean$time %in% c("run1", "run2"), "pre", ifelse(SSRT.df.clean$time %in% c("run13", "run14"), "post", NA))
AvgSSRT <- SSRT.df.clean %>% group_by(ID, prePost) %>% summarise(mean(SSRT, na.rm=TRUE))
AvgSSRT <- AvgSSRT[ which(AvgSSRT$prePost=="pre" | AvgSSRT$prePost=="post"), ]
AvgSSRT$prePost <- as.factor(AvgSSRT$prePost)
AvgSSRT <- AvgSSRT[order(AvgSSRT$prePost),]
condition_twice <- rep(condition, 2)
condition <- cbind(condition_twice)
condition <- factor(condition, labels = c("control", "train"))
SSRT.df.analysis <- merge(condition, AvgSSRT, by=0)
SSRT.df.analysis <- cbind(SSRT.df.analysis, condition)
SSRT.df.analysis <- SSRT.df.analysis[order(SSRT.df.analysis$ID),]
SSRT.df.analysis <- SSRT.df.analysis[,2:5]
colnames(SSRT.df.analysis) <- c("condition", "ID", "time", "avgd_SSRT")
dat_hist_trn <- subset(SSRT.df.clean, condition == "train")
dat_hist_trn <- dat_hist_trn[ which(dat_hist_trn$time!="run1" & dat_hist_trn$time!="run2" & dat_hist_trn$time!="run13"  & dat_hist_trn$time!="run14"), ]
dat_hist_trn <- dat_hist_trn %>% group_by(ID) %>% summarize(ViableN=sum(!is.na(SSRT)))
viable_trn <- qplot(dat_hist_trn$ViableN, geom="histogram", xlab = "Viable SST Runs", ylab = "Count", main = "Viable Training Sessions, \nTraining Group", binwidth=.5)
dat_hist_cont <- subset(cleaned_SSRT, condition == "control")
dat_hist_cont <- subset(SSRT.df.clean, condition == "control")
dat_hist_cont <- dat_hist_cont[ which(dat_hist_cont$time!="run1" & dat_hist_cont$time!="run2" & dat_hist_cont$time!="run13"  & dat_hist_cont$time!="run14"), ]
dat_hist_cont <- dat_hist_cont %>% group_by(ID) %>% summarize(ViableN=sum(!is.na(SSRT)))
viable_contr <- qplot(dat_hist_cont$ViableN, geom="histogram", xlab = "Viable SST Runs", ylab = "Count", main = "Viable Training Sessions, \nControl Group", binwidth=.5)
grid.arrange(viable_trn, viable_contr, ncol=2)
table(dat_hist_trn$ViableN)
table(dat_hist_cont$ViableN)
exclude <- as.numeric(dat_hist_trn$ID[(dat_hist_trn$ViableN<6)])
SSRTdata_prepost <- SSRTdata %>% mutate(avgd_SSRT= replace(avgd_SSRT, which(ID %in% exclude), NA))
SSRTdata_prepost[ is.na(SSRTdata_prepost) ] <- NA
SSRT.df.prepost <- SSRT.df.analysis %>% mutate(avgd_SSRT= replace(avgd_SSRT, which(ID %in% exclude), NA))
SSRT.df.prepost[ is.na(SSRT.df.prepost) ] <- NA
SSRT.df.full <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(ID %in% exclude), NA))
SSRT.df.train <- subset(SSRT.df.full, condition == "train" & time != "run1" & time != "run2" & time != "run13" & time != "run14")
SSRT.df.10ses <- subset(SSRT.df.full, time != "run1" & time != "run2" & time != "run13" & time != "run14")
SSRT.df.analysis
ggplot(SSRT.df.prepost, aes(x= time, y= avgd_SSRT, fill=condition)) +
geom_boxplot(na.rm=TRUE) +
theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("Pre and Post Stop Signal \nResponse Time (SSRT) by Group") +
labs(x= "Time Point", y= "Stop Signal Response Time")+
scale_fill_discrete(name="Condition",
breaks=c("control", "train"),
labels=c("Control", "Training"))
SSRT.df.train$time <- as.numeric(SSRT.df.train$time)
mlmodel <- lmer( SSRT ~ time + (1 + time|ID), data = SSRT.df.train )
summary(mlmodel)
SSRT.df.10ses$time <- as.numeric(SSRT.df.10ses$time)
full.mlModel<- lmer( SSRT ~ condition*time + (1 + time | ID), data = SSRT.df.10ses)
summary(full.mlModel)
anova(full.mlModel)
# Chunk 1: setup
rm(list=ls())
## Install and load required packages
list.of.packages <- c("dplyr", "reshape2", "ggplot2", "psych", "gridExtra", "knitr", "lme4")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(dplyr)
library(reshape2)
library(ggplot2)
library(psych)
library(gridExtra)
library(knitr)
library(lme4)
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/', echo=FALSE, warning=FALSE, message=FALSE)
# Chunk 2: Create the participant ID and condition variables
ID <- as.factor(c(1:144)) # Create the subject ID column
cond <- c(0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0) # Match the participant to their condition
condition <- factor(cond, labels=c("control", "train"))
# Chunk 3: Read in the data
## Import the SSRT results output from the extractAllSSTResults.m script
SSRTdata <- read.table(
"~/Desktop/REV/REV_SST/compiledResults/upToREV144/singleVarTxts/REV_SSRTint16.txt",
sep="\t", header=FALSE)
## No Response Counts
noResponseCount <- read.table(
"~/Desktop/REV/REV_SST/compiledResults/upToREV144/initialCheck/NRCount.txt",
sep="\t", header=FALSE)
## Wrong Go Counts
wrongGoCount <- read.table(
"~/Desktop/REV/REV_SST/compiledResults/upToREV144/initialCheck/wrongGoCount.txt",
sep="\t", header=FALSE)
## Percent inhibition
pctInhibition <- read.table(
"~/Desktop/REV/REV_SST/compiledResults/upToREV144/singleVarTxts/REV_PctInhib16.txt",
sep="\t", header=FALSE)
categories <- as.data.frame(read.table("~/Desktop/REV/REV_SST/info/participantCategories.txt"))
colnames(categories) <- c("ID", "completed.study", "num.categories", "food", "alcohol", "tobacco", "drugs")
categories <- categories[2:145, ]
# Chunk 4: Put all data frames in long form
# Make a vector containing all the dataframes
dfs <- c("noResponseCount", "wrongGoCount", "pctInhibition", "SSRTdata")
# Name the columns for each data frame by the run number
for(df in dfs) {
df.tmp <- get(df)
names(df.tmp) <- c("run1", "run2","run3", "run4", "run5", "run6", "run7", "run8", "run9", "run10", "run11", "run12", "run13", "run14")
assign(df, df.tmp)
}
# Append the participant IDs and conditions to the front of each data frame
for(df in dfs) {
df.tmp <- get(df)
df.tmp <- cbind(ID, condition, df.tmp)
assign(df, df.tmp)
}
# Put the data frames in long form and append "_long" to the data frame name
for(df in dfs) {
df.tmp <- get(df)
df.tmp <- melt(data=df.tmp, idvars=ID, measure.vars=c("run1", "run2","run3", "run4", "run5", "run6", "run7", "run8", "run9", "run10", "run11", "run12", "run13", "run14"), variable.name = "time", value.name=df)
assign(paste(df, "_long", sep=""),df.tmp)
}
SSRT.df.raw <- cbind(SSRTdata_long, noResponseCount_long[,4], wrongGoCount_long[,4], pctInhibition_long[,4])
colnames(SSRT.df.raw) <- c("ID", "condition", "time", "SSRT", "numNoResponse", "numWrongGo", "pctInhibition")
# Replace NaNs with Na
SSRT.df.raw[ is.na(SSRT.df.raw) ] <- NA
View(SSRT.df.raw)
which(is.na(numNoResponse) | is.na(numWrongGo) | is.na(pctInhibition) && SSRT!="NA"))
which(is.na(numNoResponse) | is.na(numWrongGo) | is.na(pctInhibition) && SSRT!="NA")
SSRT.df.clean %>% which(is.na(numNoResponse) | is.na(numWrongGo) | is.na(pctInhibition) && SSRT!="NA")
SSRT.df.clean <- SSRT.df.raw
SSRT.df.clean %>% which(is.na(numNoResponse) | is.na(numWrongGo) | is.na(pctInhibition) && SSRT!="NA")
SSRT.df.clean %>% which(is.na(numNoResponse) | is.na(numWrongGo) | is.na(pctInhibition) & !is.na(SSRT))
SSRT.df.clean[is.na(numNoResponse) | is.na(numWrongGo) | is.na(pctInhibition) & !is.na(SSRT)]
SSRT.df.clean[is.na(SSRT.df.clean$numNoResponse) | is.na(SSRT.df.clean$numWrongGo) | is.na(SSRT.df.clean$pctInhibition) & !is.na(SSRT.df.clean$SSRT)]
SSRT.df.clean[is.na(SSRT.df.clean$numNoResponse) | is.na(SSRT.df.clean$numWrongGo) | is.na(SSRT.df.clean$pctInhibition) & !is.na(SSRT.df.clean$SSRT),]
SSRT.df.clean[is.na(SSRT.df.clean$numNoResponse) | is.na(SSRT.df.clean$numWrongGo) | is.na(SSRT.df.clean$pctInhibition) & !is.na(SSRT.df.clean$SSRT),]
SSRT.df.clean[is.na(SSRT)]
SSRT.df.clean[is.na(SSRT.df.clean$SSRT)]
SSRT.df.clean[is.na(SSRT.df.clean$SSRT),]
SSRT.df.raw[is.na(SSRT.df.clean$SSRT),]
SSRT.df.raw[is.na(SSRT.df.raw$SSRT),]
which(is.na(SSRT.df.raw$SSRT), arr.ind = TRUE)
which(is.na(SSRT.df.raw$SSRT) & is.na(SSRT.df.raw$numNoResponse), arr.ind = TRUE)
which(is.na(SSRT.df.raw$SSRT) & is.na(SSRT.df.raw$numNoResponse) & is.na(SSRT.df.raw$numWrongGo), arr.ind = TRUE)
which(is.na(SSRT.df.raw$SSRT) & is.na(SSRT.df.raw$numNoResponse) | is.na(SSRT.df.raw$numWrongGo), arr.ind = TRUE)
which(is.na(SSRT.df.raw$SSRT) | is.na(SSRT.df.raw$numNoResponse) | is.na(SSRT.df.raw$numWrongGo) | is.na(SSRT.df.raw$pctInhibition) & !is.na(SSRT.df.raw$SSRT), arr.ind = TRUE)
which(is.na(SSRT.df.raw$SSRT) | is.na(SSRT.df.raw$numNoResponse) | is.na(SSRT.df.raw$numWrongGo) | is.na(SSRT.df.raw$pctInhibition) && !is.na(SSRT.df.raw$SSRT), arr.ind = TRUE)
which(!is.na(SSRT.df.raw$SSRT) && is.na(SSRT.df.raw$SSRT) | is.na(SSRT.df.raw$numNoResponse) | is.na(SSRT.df.raw$numWrongGo) | is.na(SSRT.df.raw$pctInhibition), arr.ind = TRUE)
which(is.na(SSRT.df.raw$SSRT) || is.na(SSRT.df.raw$numNoResponse) || is.na(SSRT.df.raw$numWrongGo) || is.na(SSRT.df.raw$pctInhibition) & !is.na(SSRT.df.raw$SSRT), arr.ind = TRUE)
which(is.na(SSRT.df.raw$SSRT) || is.na(SSRT.df.raw$numNoResponse) || is.na(SSRT.df.raw$numWrongGo) || is.na(SSRT.df.raw$pctInhibition), arr.ind = TRUE)
which(is.na(SSRT.df.raw$SSRT) | is.na(SSRT.df.raw$numNoResponse) | is.na(SSRT.df.raw$numWrongGo) | is.na(SSRT.df.raw$pctInhibition), arr.ind = TRUE)
which(is.na(SSRT.df.raw$numNoResponse) || is.na(SSRT.df.raw$numWrongGo) || is.na(SSRT.df.raw$pctInhibition) & !is.na(SSRT.df.raw$SSRT), arr.ind = TRUE)
which(is.na(SSRT.df.raw$numNoResponse) || is.na(SSRT.df.raw$numWrongGo) || is.na(SSRT.df.raw$pctInhibition), arr.ind = TRUE)
which(is.na(SSRT.df.raw$numNoResponse) | is.na(SSRT.df.raw$numWrongGo) | is.na(SSRT.df.raw$pctInhibition) & !is.na(SSRT.df.raw$SSRT), arr.ind = TRUE)
which(is.na(SSRT.df.raw$numNoResponse) || is.na(SSRT.df.raw$numWrongGo))
> which(is.na(SSRT.df.raw$numNoResponse) | is.na(SSRT.df.raw$numWrongGo) | is.na(SSRT.df.raw$pctInhibition) && !is.na(SSRT.df.raw$SSRT), arr.ind = TRUE)
which(is.na(SSRT.df.raw$numNoResponse) | is.na(SSRT.df.raw$numWrongGo) | is.na(SSRT.df.raw$pctInhibition) && !is.na(SSRT.df.raw$SSRT), arr.ind = TRUE)
which(!is.na(SSRT.df.raw$SSRT))
which(!is.na(SSRT.df.raw$SSRT) & is.na(SSRT.df.raw$numNoResponse))
SSRT.df.raw[4,4] <- 2
SSRT.df.raw[4,4]
View(SSRT.df.raw)
which(!is.na(SSRT.df.raw$SSRT) & is.na(SSRT.df.raw$numNoResponse))
# Chunk 1: setup
rm(list=ls())
## Install and load required packages
list.of.packages <- c("dplyr", "reshape2", "ggplot2", "psych", "gridExtra", "knitr", "lme4")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(dplyr)
library(reshape2)
library(ggplot2)
library(psych)
library(gridExtra)
library(knitr)
library(lme4)
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/', echo=FALSE, warning=FALSE, message=FALSE)
# Chunk 2: Create the participant ID and condition variables
ID <- as.factor(c(1:144)) # Create the subject ID column
cond <- c(0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0) # Match the participant to their condition
condition <- factor(cond, labels=c("control", "train"))
# Chunk 3: Read in the data
## Import the SSRT results output from the extractAllSSTResults.m script
SSRTdata <- read.table(
"~/Desktop/REV/REV_SST/compiledResults/upToREV144/singleVarTxts/REV_SSRTint16.txt",
sep="\t", header=FALSE)
## No Response Counts
noResponseCount <- read.table(
"~/Desktop/REV/REV_SST/compiledResults/upToREV144/initialCheck/NRCount.txt",
sep="\t", header=FALSE)
## Wrong Go Counts
wrongGoCount <- read.table(
"~/Desktop/REV/REV_SST/compiledResults/upToREV144/initialCheck/wrongGoCount.txt",
sep="\t", header=FALSE)
## Percent inhibition
pctInhibition <- read.table(
"~/Desktop/REV/REV_SST/compiledResults/upToREV144/singleVarTxts/REV_PctInhib16.txt",
sep="\t", header=FALSE)
categories <- as.data.frame(read.table("~/Desktop/REV/REV_SST/info/participantCategories.txt"))
colnames(categories) <- c("ID", "completed.study", "num.categories", "food", "alcohol", "tobacco", "drugs")
categories <- categories[2:145, ]
# Chunk 4: Put all data frames in long form
# Make a vector containing all the dataframes
dfs <- c("noResponseCount", "wrongGoCount", "pctInhibition", "SSRTdata")
# Name the columns for each data frame by the run number
for(df in dfs) {
df.tmp <- get(df)
names(df.tmp) <- c("run1", "run2","run3", "run4", "run5", "run6", "run7", "run8", "run9", "run10", "run11", "run12", "run13", "run14")
assign(df, df.tmp)
}
# Append the participant IDs and conditions to the front of each data frame
for(df in dfs) {
df.tmp <- get(df)
df.tmp <- cbind(ID, condition, df.tmp)
assign(df, df.tmp)
}
# Put the data frames in long form and append "_long" to the data frame name
for(df in dfs) {
df.tmp <- get(df)
df.tmp <- melt(data=df.tmp, idvars=ID, measure.vars=c("run1", "run2","run3", "run4", "run5", "run6", "run7", "run8", "run9", "run10", "run11", "run12", "run13", "run14"), variable.name = "time", value.name=df)
assign(paste(df, "_long", sep=""),df.tmp)
}
# Chunk 5: Create a single data frame
SSRT.df.raw <- cbind(SSRTdata_long, noResponseCount_long[,4], wrongGoCount_long[,4], pctInhibition_long[,4])
colnames(SSRT.df.raw) <- c("ID", "condition", "time", "SSRT", "numNoResponse", "numWrongGo", "pctInhibition")
# Replace NaNs with Na
SSRT.df.raw[ is.na(SSRT.df.raw) ] <- NA
# Chunk 6: Remove problem runs
SSRT.df.clean <- SSRT.df.raw
########## MAKE SURE RIGHT GROUPS GETTING CRITERIA #############
## Replace non-responses with NA (Everyone, all time points)
SSRT.df.clean <- SSRT.df.clean %>% mutate(numNoResponse= replace(numNoResponse, which(numNoResponse>25 & time != "run1" & time != "run2" & time != "run13" & time != "run14" ), NA)) # Training
SSRT.df.clean <- SSRT.df.clean %>% mutate(numNoResponse= replace(numNoResponse, which(numNoResponse>50), NA)) # Scans
## And the SSRTs for the above
SSRT.df.clean <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(is.na(numNoResponse) & time != "run1" & time != "run2" & time != "run13" & time != "run14"), NA)) # Training
SSRT.df.clean <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(is.na(numNoResponse)), NA)) # Scans
## Replace wrong gos with NA (Everyone scans, only training group runs 3-12)
SSRT.df.clean <- SSRT.df.clean %>% mutate(numWrongGo= replace(numWrongGo, which(condition == "train" & numWrongGo>25 & time != "run1" & time != "run2" & time != "run13" & time != "run14"), NA)) # Training
SSRT.df.clean <- SSRT.df.clean %>% mutate(numWrongGo= replace(numWrongGo, which(numWrongGo>25 & time != "run3" & time != "run4" & time != "run5" & time != "run6" & time != "run7" & time != "run8" & time != "run9" & time != "run10" & time != "run11" & time != "run12"), NA)) # Scans
## And the SSRTs for the above
SSRT.df.clean <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(condition == "train" & is.na(numWrongGo) & time != "run1" & time != "run2" & time != "run13" & time != "run14" ), NA)) # Training
SSRT.df.clean <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(is.na(numWrongGo) & time != "run3" & time != "run4" & time != "run5" & time != "run6" & time != "run7" & time != "run8" & time != "run9" & time != "run10" & time != "run11" & time != "run12"), NA)) # Scans
## Replace SSRTs with NA (Everyone scans, only training group runs 3-12)
SSRT.df.clean <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(condition=="train" & SSRT>500 & time != "run1" & time != "run2" & time != "run13" & time != "run14"), NA)) # Training
SSRT.df.clean <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(SSRT>850 | SSRT <100 & time != "run3" & time != "run4" & time != "run5" & time != "run6" & time != "run7" & time != "run8" & time != "run9" & time != "run10" & time != "run11" & time != "run12"), NA)) # Scans
## Replace % inhibition with NA (Everyone scans, only training group runs 3-12)
SSRT.df.clean <- SSRT.df.clean %>% mutate(pctInhibition= replace(pctInhibition, which(pctInhibition<15 | pctInhibition>75 & condition=="train" & time != "run1" & time != "run2" & time != "run13" & time != "run14" ), NA)) # Training
SSRT.df.clean <- SSRT.df.clean %>% mutate(pctInhibition= replace(pctInhibition, which(pctInhibition<20 | pctInhibition>75 & time != "run3" & time != "run4" & time != "run5" & time != "run6" & time != "run7" & time != "run8" & time != "run9" & time != "run10" & time != "run11" & time != "run12"), NA)) # Scans
## And the SSRTs for the above
SSRT.df.clean <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(condition=="train" & is.na(pctInhibition) & time != "run1" & time != "run2" & time != "run13" & time != "run14" ), NA)) # Training
SSRT.df.clean <- SSRT.df.clean %>% mutate(SSRT= replace(SSRT, which(is.na(pctInhibition) & time != "run3" & time != "run4" & time != "run5" & time != "run6" & time != "run7" & time != "run8" & time != "run9" & time != "run10" & time != "run11" & time != "run12"), NA)) # Scans
withoutOCCU <- 8.05 + 7.5 + 3.5 + 4 + 3.21+ 4 + 430 + 7.25+4.50+8.5 + 6.5 + 4.75 + 24.97 + 10 + 4.5 + 7 + 5 + 4 + 6.75 + 18.48 + 7.5 + 9.99 + 6.44 + 10.5 + 9 + 2.75 + 8 + 7.5 + 10.86 + 13.56 + 10 + 61.71 + 14.82 + 65.09 + 24.83 + 2 + 26.4 + 8.77 + 10.59 +3.5 + 7.25 + 18 + 4.25 + 5 + 10.95 + 32.4 + 38.2 + 40 + 5 + 8.95 + 10.99 + 19.44 + 3 + 7 + 61.33
withoutOCCU
rm(list=ls()) # Clear the workspace
setwd("~/Dropbox/R_projects/R_practice/") # Set the working directory
## Install and load required packages
list.of.packages <- c("tidyverse", "knitr", "maps") # Make a character vector of packages used in the script
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])] # Which packages are not already installed
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, library, character.only = TRUE) # If the list of packages we want and the list of new packages is not of the same length, install the packages listed in new.packages
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs_ch04/',
echo=TRUE, warning=FALSE, message=FALSE) # Set the knit options: save figures to a folder, echo code chunks in the knitted document, don't print warnings in the knitted doc, don't print messages in the knitted doc.
seq(1, 10)
seq(1, 10)
x <- "hello workd"
x <- "hello world"
x <- "hello world"
(y <- seq(1, 10, length.out = 5))
my_variable <- 10
my_varıable
my_variable
my_varıable
my_varıable
my_varıable
my_varıable
library(tidyverse)
rm(list=ls()) # Clear the workspace
setwd("~/Dropbox/R_projects/R_practice/") # Set the working directory
## Install and load required packages
list.of.packages <- c("tidyverse", "knitr", "maps") # Make a character vector of packages used in the script
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])] # Which packages are not already installed
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, library, character.only = TRUE) # If the list of packages we want and the list of new packages is not of the same length, install the packages listed in new.packages
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs_ch04/', echo=TRUE, warning=FALSE, message=FALSE) # Set the knit options: save figures to a folder, echo code chunks in the knitted document, don't print warnings in the knitted doc, don't print messages in the knitted doc.
ggplot(dota = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
filter(mpg, cyl = 8)
?filter
filter(mpg, cyl == 8)
filter(mpg, cyl == 8)
(filter(mpg, cyl == 8) )
filter(mpg, cyl == 8)
filter(diamond, carat > 3)
filter(diamonds, carat > 3)
filter(diamonds, carat > 3)
---
title: Solutions to G. Grolemund & H. Wickhams’s [R for Data Science](http://r4ds.had.co.nz/index.html),   Chapter
5
author: "Krista DeStasio"
date: "8/2/2017"
output:
html_document:
toc: yes
toc_depth: 4
toc_float: yes
pdf_document:
toc: yes
toc_depth: '4'
---
# A Brief Introduction to This File
This R file walks through G. Grolemund & H. Wickhams’s online text, ["R for Data Science."](http://r4ds.had.co.nz/index.html) Much of the code is sourced directly from the book and credit belongs to the authors. Here, some sections of code are heavily commented so that the beginning R programmer can read through and understand what each line of code does and compare it to their own as they work through the text. Throughout, the book provides the primary and most thorough explanation. **For the greatest learning benefit, I suggest you attempt each exercise on your own before looking at the code or write-ups provided here.** Of course, there is more than one way to write code and you may find a more elegant solution that you prefer.
For those new to R and RStudio, it may be of additional benefit to knit the document and examine how the code in the Rmd file is visually expressed in the resultant knitted document. For example, see how the ` ["R for Data Science."](http://r4ds.had.co.nz/index.html)` is expressed as a hyperlink in the preceeding paragraph where it was not surrounded by tick-marks and compare that to how the same text is expressed in this paragraph when surrounded by ticks. See also the difference in appearance when knitting to different document types (HTML, PDF, Word).
**Tip**: *If you are using RStudio, click the text next to the orange # box at the bottom of the editor window to easily navigate the code chunks.*
**Tip**: *Use the `?` before any command to view the documentation on that function. Do this often. For example, type `?setwd` to see a description, usage, arguments, and more for the function `setwd()`.*
**Tip**: Find RStudio Cheatsheets at [https://www.rstudio.com/resources/cheatsheets/](https://www.rstudio.com/resources/cheatsheets/)
```{r Setup, include=FALSE}
rm(list=ls()) # Clear the workspace
setwd("~/Dropbox/R_projects/R_practice/") # Set the working directory
## Install and load required packages
list.of.packages <- c("knitr", "tidyverse", "nycflights13") # Make a character vector of packages used in the script
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])] # Which packages are not already installed
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, library, character.only = TRUE) # If the list of packages we want and the list of new packages is not of the same length, install the packages listed in new.packages
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs_ch04/', echo=TRUE, warning=FALSE, message=FALSE) # Set the knit options: save figures to a folder, echo code chunks in the knitted document, don't print warnings in the knitted doc, don't print messages in the knitted doc.
```
# Chapter 5, Data transformation
rm(list=ls()) # Clear the workspace
setwd("~/Dropbox/R_projects/R_practice/") # Set the working directory
## Install and load required packages
list.of.packages <- c("knitr", "tidyverse", "nycflights13") # Make a character vector of packages used in the script
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])] # Which packages are not already installed
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, library, character.only = TRUE) # If the list of packages we want and the list of new packages is not of the same length, install the packages listed in new.packages
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs_ch04/', echo=TRUE, warning=FALSE, message=FALSE) # Set the knit options: save figures to a folder, echo code chunks in the knitted document, don't print warnings in the knitted doc, don't print messages in the knitted doc.
flights
?flights
View(flights)
filter(flights, month == 1, day == 1)
(jan1 <- filter(flights, month == 1, day == 1))
(dec25 <- filter(flights, month ==12, day == 25))
filter(flights, month = 1)
sqrt(2) ^ 2 == 2
1/49 * 49 == 1
near(1/49 * 49 == 1)
near(1/49 * 49, 1)
near(sqrt(2) ^ 2, 2)
filter(flights, month == 11 | month == 12)
nov_dec <- filter(flights, month %in% c(11,12))
NA > 5
10 == NA
NA + 10
NA / 2
NA == NA
View(dec25)
str(flights)
rm(list=ls()) # Clear the workspace
setwd("~/Dropbox/code/R/R_for_data_science/") # Set the working directory
## Install and load required packages
list.of.packages <- c("knitr", "tidyverse", "nycflights13") # Make a character vector of packages used in the script
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])] # Which packages are not already installed
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, library, character.only = TRUE) # If the list of packages we want and the list of new packages is not of the same length, install the packages listed in new.packages
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs_ch04/', echo=TRUE, warning=FALSE, message=FALSE) # Set the knit options: save figures to a folder, echo code chunks in the knitted document, don't print warnings in the knitted doc, don't print messages in the knitted doc.
filter(flights, arr_delay >= 120)
str(flights)
filter(flights, dest %in% c("IAH", "HOU"))
filter(flights, dest == "IAH" | dest == "HOU"))
filter(flights, dest == "IAH" | dest == "HOU")
filter(flights, carrier %in% c("AA", "UA"))
filter(flights, carrier == "AA" | carrier == "UA")
filter(flights, month %in% c(7, 8, 9))
filter(flights, month == 7 | month == 8 | month == 9)
filter(flights, arr_delay > 120 & dep_delay < 1)
str(flights)
filter(flights, dep_delay >= 60, arr_delay < -30)
filter(flights, dep_delay >= 60 & arr_delay < -30)
filter(flights, dep_delay >= 60
)
filter(flights, arr_delay < -30)
filter(flights, dep_delay >= 60 & arr_delay < -30)
head(flights)
View(flights)
filter(flights, dep_time > 0 & dep_time < 600)
?between
filter(flights, between(flights$month, 7, 9))
filter(flights, between(flights$dep_time, 0, 600))
count(is.na(flights$dep_time))
table(is.na(flights$dep_time))
is.na(flights$dep_time)
length(is.na(flights$dep_time))
table(is.na(flights$dep_time))
length(is.na(flights$dep_time))
length(filter(flights, is.na(dep_time)))
table(is.na(flights$dep_time))
336776-328521
length(filter(flights, is.na(dep_time)))
table(is.na(flights$dep_time))
is.na(flights$dep_time)
count(is.na(flights$dep_time))
length(is.na(flights$dep_time))
length(flights, dep_time == NA)
table(is.na(flights$dep_time))
length(flights, dep_time == NA)
str(flights)
length(flights, dep_time == "NA")
length(flights, dep_time == NA)
length(flights, is.na(dep_time))
length(flights, is.na(flights$dep_time))
length(is.na(flights$dep_time))
table(is.na(flights$dep_time))
filter(flights, is.na(dep_time))
arrange(flights, year, month, day)
arrange(flights(desc(arr_delay)))
arrange(flights, (desc(arr_delay)))
arrange(flights, desc(arr_delay))
df <- tibble(x = c(5, 2, NA))
arrange(df, x)
arrange(df, desc(x))
str(flights)
arrange(flights, is.na(arr_time))
arrange(flights, !is.na(arr_time))
?arrange
arrange(flights, desc(dep_delay))
arrange(flights, dep_delay)
arrange(flights, air_time)
arrange(flights, air_time)
arrange(flights, air_time)
arrange(flights, desc(distance / air_time))
arrange(flights, desc(air_time))
arrange(flights, air_time)
select(flights, year, month, day)
select(flights, year:day)
select(flights, -(year:day))
rename(flights, tail_num = tailnum)
select(flights, time_hour, air_time, everything())
select(flights, dept_time, dep_delay, arr_time, arr_delay)
select(flights, dep_time, dep_delay, arr_time, arr_delay)
head(flights)
srt(flights)
str(flights)
select(starts_with("dep_") | starts_with("arr_"))
select(flights, starts_with("dep_") | starts_with("arr_"))
?select
select(flights, starts_with("dep_" | "arr_"))
select(flights, starts_with("dep_"), starts_with("arr_"))
select(flights, ends_with("time"), ends_with("delay"), -(sched_dep_time))
select(flights, ends_with("time"), ends_with("delay"), -(starts_with("sched"))
```
select(flights, ends_with("time"), ends_with("delay"), -(starts_with("sched")))
select(flights, ends_with("time"), ends_with("delay"), -(starts_with("sched")), -(starts_with("air")))
select(flights, contains("dep"), contains("arr"))
select(flights, contains("dep"), contains("arr"), -(contains("sched")))
select(flights, contains("dep_"), contains("arr_"), -(contains("sched")))
select(flights, contains("dep_"), contains("arr_")), -(contains("sched")))
select(flights, contains("dep_"), contains("arr_"))
select(flights, contains("dep"), contains("arr_"), -(contains("sched")))
select(flights, dep_delay, dep_delay)
select(flights, arr_delay, dep_delay, dep_delay)
?one_of
vars <- c("year", "month", "day", "dep_delay", "arr_delay")
select(flights, one_of(vars))
select(flights, contains("TIME"))
select(flights, contains("TIME", ignore.case = FALSE))
select(flights, contains("TIME", ignore.case = FALSE))
